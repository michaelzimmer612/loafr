LOAFR System

Repository Description:
  -Implement limited LOAFR functionality to load csv logfile data
   and perform a filter operation (End-to-end scenario test)
  -Unit testing of significant classes and functions

Team 12 Group Members:
  -Sal Farah
  -Sean Coffey
  -Deb Das
  -Michael Zimmer
  

P5 - Agile / Scrum Development

Version: 0.2
Approved Date: 5-3-22

Changes from v0.1:
   1. Added Count and Average function in Analyzer class to calculate the count
      and average of unfiltered log entries.
   2. Added use case scenario testing in Test class
   3. Added SprintJarFinal.jar as quick showcase of sprint results
   4. Added testdata3.csv for testing functions with a larger log file
   
How to demostrate v0.2 with jar file:
  1. Download/locate the following:
    -SprintJarFinal.jar
    -testdata2.csv
    -testdata3.csv
  2. Ensure all 3 files are in the same folder
  3. Open cmd line
  4. Navigate directory containing above files
  5. Run cmd "java -jar SprintJarFinal.jar" and view output

   
How to build LOAFR system and run unit testing:
  1. Optional: Change logfile test data by changing the filepath
     in the main method of Test.java
  2. In terminal, compile files all files list above with the javac command
  3. Run "java Test"
  4. Original logfile data and filtered data output to terminal
  5. At each filter step, the count and average blood sugar level of unfiltered
     log entries is output.
  
  

P4 - Implementation and Testing

Version: 0.1
Approved Date: 4-11-22
  
Files Included:
  1. Analyzer.java: The Analyzer object is the primary data structure
     for holding a lists of logfile and operation data
  2. LogFile.java: A logfile object holds an ArrayList of LogEntry 
     objects
  3. LogEntry.java: Base class to hold standard logentry fields 
     (i.e. timestamp, eventType, eventMessage, deviceID)
    a. BloodSensorLogEntry Subclass: Extends LogEntry class to hold data 
       fields specific to logfiles generated by the Blood Sensor component.
       (i.e. sugarLevel)
  4. Operation.java: Base class object to hold parameters of Filter, Sort, 
     and Search operations
    a. Filter.java Subclass: Extended class object to store parameters of a filter
       operation
  5. Test.java: A test class is included for each class above. Currently set as the main file to 
     run all unit tests as well as display output of end-to-end use case scenario.
  6. Unit Testing Classes: <Class Name>Test.java
     Unit testing for each class is included a "Testing" class with
     the same name.

How to build LOAFR system and run unit testing:
  1. Optional: Change logfile test data by changing the filepath
     in the main method of Test.java
  2. In terminal, compile files all files list above with the javac command
  3. Run "java Test"
  4. Original logfile data and filtered data output to terminal

