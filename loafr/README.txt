P4 - Implementation and Testing

Repository Description:
  -Implement limited LOAFR functionality to load csv logfile data
   and perform a filter operation (End-to-end scenario test)
  -Unit testing of significant classes and functions

Team 12 Group Members:
  -Sal Farah
  -Sean Coffey
  -Deb Das
  -Michael Zimmer

Version: 0.1
Approved Data: 4-11-22
  
Files Included:
  1. Analyzer.java: The Analyzer object is the primary data structure
     for holding a lists of logfile and operation data
  2. LogFile.java: A logfile object holds an ArrayList of LogEntry 
     objects
  3. LogEntry.java: Base class to hold standard logentry fields 
     (i.e. timestamp, eventType, eventMessage, deviceID)
    a. BloodSensorLogEntry Subclass: Extends LogEntry class to hold data 
       fields specific to logfiles generated by the Blood Sensor component.
       (i.e. sugarLevel)
  4. Operation.java: Base class object to hold parameters of Filter, Sort, 
     and Search operations
    a. Filter.java Subclass: Extended class object to store parameters of a filter
       operation
  5. Test.java: A test class is included for each class above. Currently set as the main file to run all unit tests as well as display output of 
    end-to-end use case scenario.
  6. Unit Testing Classes: <Class Name>Test.java
     Unit testing for each class is included a "Testing" class with
     the same name.

How to build and execute LOAFR system:
  1. Optional: Change logfile test data by changing the filepath
     in the main method of Test.java
  2. In teriminal, compile files 1, 2, 3, 3a, 4, 4a, and 5 above with the 
     javac command
  3. Run "java Test"
  4. Original logfile data and filtered data output to terminal

